import java.util.*;
import java.math.BigInteger;

class DsaAlg {
    final static BigInteger one = BigInteger.ONE;
    final static BigInteger zero = BigInteger.ZERO;

    // Method to find the next probable prime
    public static BigInteger getNextPrime(String ans) {
        BigInteger test = new BigInteger(ans);
        while (!test.isProbablePrime(99)) {
            test = test.add(one);
        }
        return test;
    }

    // Method to find a factor q of n
    public static BigInteger findQ(BigInteger n) {
        BigInteger start = new BigInteger("2");
        while (!n.isProbablePrime(99)) {
            while (!(n.mod(start).equals(zero))) {
                start = start.add(one);
            }
            n = n.divide(start);
        }
        return n;
    }

    // Method to find generator g
    public static BigInteger getGen(BigInteger p, BigInteger q, Random r) {
        BigInteger h = new BigInteger(p.bitLength(), r);
        h = h.mod(p);
        return h.modPow((p.subtract(one)).divide(q), p);
    }

    public static void main(String[] args) throws Exception {
        Random randObj = new Random();

        // Finding primes p and q
        BigInteger p = getNextPrime("10600"); // approximate prime
        BigInteger q = findQ(p.subtract(one));
        BigInteger g = getGen(p, q, randObj);

        System.out.println("Simulation of Digital Signature Algorithm\n");
        System.out.println("Global public key components are:\n");
        System.out.println("p is: " + p);
        System.out.println("q is: " + q);
        System.out.println("g is: " + g);

        // Private key x
        BigInteger x = new BigInteger(q.bitLength(), randObj);
        x = x.mod(q);

        // Public key y
        BigInteger y = g.modPow(x, p);

        // Random secret k
        BigInteger k = new BigInteger(q.bitLength(), randObj);
        k = k.mod(q);

        // Signature component r
        BigInteger r = (g.modPow(k, p)).mod(q);

        // Random hash value
        BigInteger hashVal = new BigInteger(p.bitLength(), randObj);

        // Signature component s
        BigInteger kInv = k.modInverse(q);
        BigInteger s = kInv.multiply(hashVal.add(x.multiply(r)));
        s = s.mod(q);

        System.out.println("\nSecret information are:\n");
        System.out.println("x (private) is: " + x);
        System.out.println("k (secret) is: " + k);
        System.out.println("y (public) is: " + y);
        System.out.println("h (random hash) is: " + hashVal);

        System.out.println("\nGenerating digital signature:\n");
        System.out.println("r is: " + r);
        System.out.println("s is: " + s);

        // Verification process
        BigInteger w = s.modInverse(q);
        BigInteger u1 = (hashVal.multiply(w)).mod(q);
        BigInteger u2 = (r.multiply(w)).mod(q);
        BigInteger v = (g.modPow(u1, p)).multiply(y.modPow(u2, p)).mod(p).mod(q);

        System.out.println("\nVerifying digital signature (checkpoints):\n");
        System.out.println("w is: " + w);
        System.out.println("u1 is: " + u1);
        System.out.println("u2 is: " + u2);
        System.out.println("v is: " + v);

        // Checking if signature is valid
        if (v.equals(r)) {
            System.out.println("\nSuccess: digital signature is verified!\n");
        } else {
            System.out.println("\nError: incorrect digital signature\n");
        }
    }
}
