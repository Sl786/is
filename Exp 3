import random

class DsaAlg:
    one = 1
    zero = 0

    # Method to find the next probable prime
    @staticmethod
    def get_next_prime(ans):
        test = int(ans)
        while not DsaAlg.is_prime(test):
            test += DsaAlg.one
        return test

    # Basic primality test
    @staticmethod
    def is_prime(n):
        if n <= 1:
            return False
        if n <= 3:
            return True
        if n % 2 == 0 or n % 3 == 0:
            return False
        i = 5
        while i * i <= n:
            if n % i == 0 or n % (i + 2) == 0:
                return False
            i += 6
        return True

    # Method to find a factor q of n
    @staticmethod
    def find_q(n):
        start = 2
        while not DsaAlg.is_prime(n):
            while n % start != 0:
                start += DsaAlg.one
            n = n // start
        return n

    # Method to find generator g
    @staticmethod
    def get_gen(p, q, rand_obj):
        h = rand_obj.randint(2, p - 1)
        return pow(h, (p - 1) // q, p)

    # Modular inverse function using Extended Euclidean Algorithm
    @staticmethod
    def mod_inverse(a, m):
        m0, x0, x1 = m, 0, 1
        while a > 1:
            q = a // m
            m, a = a % m, m
            x0, x1 = x1 - q * x0, x0
        if x1 < 0:
            x1 += m0
        return x1

    @staticmethod
    def main():
        rand_obj = random.SystemRandom()

        # Finding primes p and q
        p = DsaAlg.get_next_prime("10600")  # approximate prime
        q = DsaAlg.find_q(p - 1)
        g = DsaAlg.get_gen(p, q, rand_obj)

        print("Simulation of Digital Signature Algorithm\n")
        print("Global public key components are:\n")
        print(f"p is: {p}")
        print(f"q is: {q}")
        print(f"g is: {g}")

        # Private key x
        x = rand_obj.randint(1, q - 1)

        # Public key y
        y = pow(g, x, p)

        # Random secret k
        k = rand_obj.randint(1, q - 1)

        # Signature component r
        r = pow(g, k, p) % q

        # Random hash value
        hash_val = rand_obj.randint(1, p - 1)

        # Signature component s
        k_inv = DsaAlg.mod_inverse(k, q)
        s = (k_inv * (hash_val + x * r)) % q

        print("\nSecret information are:\n")
        print(f"x (private) is: {x}")
        print(f"k (secret) is: {k}")
        print(f"y (public) is: {y}")
        print(f"h (random hash) is: {hash_val}")

        print("\nGenerating digital signature:\n")
        print(f"r is: {r}")
        print(f"s is: {s}")

        # Verification process
        w = DsaAlg.mod_inverse(s, q)
        u1 = (hash_val * w) % q
        u2 = (r * w) % q
        v = (pow(g, u1, p) * pow(y, u2, p) % p) % q

        print("\nVerifying digital signature (checkpoints):\n")
        print(f"w is: {w}")
        print(f"u1 is: {u1}")
        print(f"u2 is: {u2}")
        print(f"v is: {v}")

        # Checking if signature is valid
        if v == r:
            print("\nSuccess: digital signature is verified!\n")
        else:
            print("\nError: incorrect digital signature\n")

# Run the main method
DsaAlg.main()
